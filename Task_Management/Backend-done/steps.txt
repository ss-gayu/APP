1. make a basic express app
2. install mongodb :: database
3. install mongoose :: ODM (Object Data Mapping)
(https://www.mongodb.com/developer/languages/javascript/getting-started-with-mongodb-and-mongoose/#:~:text=data%20with%20ease.-,What%20is%20Mongoose%3F,-Many%20who%20learn)
--> it simplifies interaction with mongoDB and helps you add schema and validations
--> data modeling, schema enforcement, model validation, and general data manipulation

4. Create account on MongoDB Atlas
(choose Tier, create database user)
--> Network Access :: +Add IP Address :: Allow Access from Anywhere
--> Database Access :: you change password to a new password

5. Connect to that database
--> make a separate folder called "config"
--> make file in it called "dbConfig.js"


# SERVER (Backend) --> Mongoose (ODM) --> MongoDB Atlas (Database)
6. Inside this "dbConfig.js" file,
`
    const mongoose = require("mongoose");

    const connectToDb = async () => {
        try {
            await mongoose.connect("");
            console.log("---------- ✅ Database Connected ---------");
        } catch (err) {
            console.log("-------- ❌ Database NOT Connected -------");
        }
    };

    connectToDb();
`

7. To get the connection string --> Connect button --> drivers --> nodejs --> copy link
(MAKE sure that your password does not have SPECIAL CHARACTERS : use alphabets and numbers only)
in between ".../?..." write database name
for ex, .../TASK_DB?...

8. In app js, require this file.
// requiring a file (first time) runs that file line-by-line
//                  (second time onwards) will get the cached exports

9. Get familiar with MongoDB Atlas
Organisation   -->  Cluster       -->  Database             --> collection               --> document
(overview btn) -->  real machine  -->  (browse collections) --> (consider it as folder)  --> data file

* Collection name should be kept in PLURAL FORM
* Each document is JSON with Type encoding :: BSON (Binary JSON)
(https://www.mongodb.com/resources/languages/bson#:~:text=BSON%20documentation.-,How%20is%20BSON%20Different%20from%20JSON%3F,-JSON)


10. We want a reliable database where we know, 
--> what things will be there, 
--> their format
--> rules around it (if any)
:: schema

Company (machine)                     --manufactures-->            Company (Machine)              --manufactures--> Mobile (back cover)
(Marks, Unison, Mahalkshmi, Fresta)   ---------------->     (ex. zapvi, casekaro, thecosecomapny) ---------------->    PRODUCT

SCHEMA               ---------------------------------------->    MODEL  --------------------------------------------> DOCUMENT
(idea, there is physical significance)                         (collection)


11. Make a folder names models --> make a file names taskModel.js
(https://mongoosejs.com/docs/)
(https://mongoosejs.com/docs/guide.html#definition)
(https://mongoosejs.com/docs/validation.html)
--> Create a SCHEMA --> create a MODEL 
(this model will be used in future to do CRUD operations)


--> key: type
--> key: {type: ,...}

--> _id is added to the document by default (and it is unique :: assurance given to you by mongodb)
(so, you don't need to worry about id creation)

--> in a database, we always want to have a notion of timing of entry create and update (for debugging purpose)
Schema({...schema rules...},{timestamps: true});
when we write timestamps true, DB will add the timestamps not the server


// SERVER        ----sent-the-request---> Database
// (10:52:41:330)                       (10:52:41:376) (this is the real time of entry creation)(we prefer database time)
// (hh:mm:ss:milli)



--> mongoose.model("tasks", taskSchema); // collectionName (keep it plural), schema
// id the collectionName is not present in DB, then the mongoose will automatically create a collection with that name


## Once you create a model
(https://mongoosejs.com/docs/api/model.html#Model.create())


## TIMEZONES
https://upload.wikimedia.org/wikipedia/commons/e/ec/World_Time_Zones_Map.svg


-------------------------------- --------------------------------
if you get CORS ERROR 

install this on backend server and use it
https://www.npmjs.com/package/cors

-------------------------------- --------------------------------
-------------------------------- --------------------------------
One of the reasons: 
if you want to abstract out the secrets from your code then you use environment variables

https://www.npmjs.com/package/dotenv

1. npm i dotenv

2. make a .env file and mention all your secrets in it as key=value without space
use-case example --> PORT=1401

3. add this code in * app.js * --> require('dotenv').config()
## Always put it in the first line (as long as possible)
### this will save you form many bugs coming in future

4. use-case example --> app.listen(process.end.PORT)
-------------------------------- --------------------------------